# MAKEFILE for parser

NAME=ipe

# Compiler
CPP = g++

# Directives for the compiler
# -c: the output is an object file, the linking stage is not done.
# -g: debug
# -Wall: all warnings
# -ansi: standard language
# -02: optimization level
CFLAGS = -c -g  -Wall -ansi -O2

# The fast lexical analyser generator
LEX = flex

#GNU Project parser generator (yacc replacement)
YACC= bison 

# Options
# -d: the file y.tab.h is generated
# -y: yacc compatibility --> y.tab.c y.tab.h (OPTIONAL)
# -t: debug
# -g: the file y.dot is generated; 
#     this file can be seen on the screen using 
#       dot -Tx11 y.dot 
#       Alternatives 
#	 	dot -TXXX y.dot -o y.XXX
#	    where XXX can be: gif, pdf, png, ps, svg
# -v  the file y.output is generated (OPTIONAL)
YFLAGS = -d -t -g

# Objects
OBJECTS= $(NAME).tab.o lex.yy.o 

# Includes
INCLUDES = ../includes

#######################################################

# Regla principal

all: $(OBJECTS)


# Subreglas

# Lexical analyzer
# -Wno-unused-function, -Wno-sign-compare: these error messages are not displayed
lex.yy.o:  lex.yy.c $(NAME).tab.h
	$(CPP) $(CFLAGS)  -Wno-unused-function  -Wno-sign-compare lex.yy.c 

lex.yy.c: $(NAME).l $(NAME).tab.h $(INCLUDES)/macros.hpp
	@echo "Generating: lex.yy.c"
	@$(LEX) $(NAME).l
	@echo

# Parser
$(NAME).tab.o: $(NAME).tab.c  $(NAME).tab.h ../error/error.hpp $(INCLUDES)/macros.hpp
	@echo "Compiling: " $(NAME).tab.c
	@$(CPP) $(CFLAGS) $(NAME).tab.c
	@echo

$(NAME).tab.c $(NAME).tab.h: $(NAME).y ../error/error.hpp $(INCLUDES)/macros.hpp
	@echo "Generando: " $(NAME).tab.c $(NAME).tab.h
	@$(YACC) $(YFLAGS) $(NAME).y 
	@echo



#######################################################
# Generate the output file to show conflicts, if they exist
$(NAME).output: $(NAME).y ../error/error.hpp 
	@echo "Generating: " $(NAME).output
	@$(YACC) -v $(NAME).y 
	@echo


#######################################################
# Auxiliary files and hmtl directory are deleted
clean: 
	@echo
	@echo "Deleting in subdirectory parser"
	@rm -f $(OBJECTS) $(NAME).tab.[ch] lex.yy.c $(NAME).dot $(NAME).output *~ 
	@echo



